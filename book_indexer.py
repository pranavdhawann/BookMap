# -*- coding: utf-8 -*-
"""book-indexer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DOeIVkOeO4GdxRubifEd9b69p6WBtRIG
"""

import os
import shutil

!pip install -r /content/requirements.txt
!sudo apt-get install poppler-utils tesseract-ocr

import json
import re
from PIL import Image, ImageDraw, ImageFont
from ultralytics import YOLO
from pdf2image import convert_from_path
import img2pdf
import pytesseract

root_path = '/content/root.json'

def load_paths():
    """Load paths and configurations from paths.json."""
    with open('root.json', 'r') as file:
        paths = json.load(file)
    return paths

def pdf_to_images(pdf_path, output_folder):
    """Convert PDF to images and save them in the specified folder."""
    os.makedirs(output_folder, exist_ok=True)
    images = convert_from_path(pdf_path)
    for i, image in enumerate(images):
        image.save(os.path.join(output_folder, f'image_{i}.jpg'), 'JPEG')

def process_images(input_folder, output_folder, json_output, model, class_names, class_colors):
    """Process images using YOLO model and extract text using Tesseract."""
    os.makedirs(output_folder, exist_ok=True)
    results_json = []
    for filename in os.listdir(input_folder):
        if filename.lower().endswith(('.jpg', '.jpeg', '.png')):
            image_path = os.path.join(input_folder, filename)
            image = Image.open(image_path)
            results = model.predict(image_path)
            draw = ImageDraw.Draw(image)
            font = ImageFont.load_default()

            image_results = {"image": filename, "detections": []}

            for r in results:
                for box in r.boxes:
                    x1, y1, x2, y2 = box.xyxy[0].int().tolist()
                    label = class_names[int(box.cls[0])]
                    color = tuple(class_colors[label])
                    draw.rectangle([(x1, y1), (x2, y2)], outline=color, width=2)
                    draw.text((x1, y1 - 10), label, fill=color, font=font)

                    section_text = ""
                    if label == "Section-header":
                        cropped_image = image.crop((x1, y1, x2, y2))
                        section_text = pytesseract.image_to_string(cropped_image).strip()

                    image_results["detections"].append({
                        "label": label,
                        "bbox": [x1, y1, x2, y2],
                        "text": section_text
                    })

            results_json.append(image_results)
            image.save(os.path.join(output_folder, filename))

    with open(json_output, 'w') as json_file:
        json.dump(results_json, json_file, indent=4)

def convert_images_to_pdf(image_dir, pdf_output):
    """Convert processed images to a single PDF."""
    image_files = [os.path.join(image_dir, f) for f in sorted(os.listdir(image_dir)) if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
    with open(pdf_output, "wb") as pdf_file:
        pdf_file.write(img2pdf.convert(image_files))

def remove_special_characters(text):
    """Clean text by removing special characters and excess spaces."""
    cleaned_text = re.sub(r'[\n\r\t]', ' ', text)
    cleaned_text = re.sub(r'\s+', ' ', cleaned_text)
    cleaned_text = re.sub(r'[^a-zA-Z0-9\s]', '', cleaned_text)
    return cleaned_text.strip()

def generate_index(json_input, output_index):
    """Generate an index from the detections in the JSON output."""
    with open(json_input, 'r') as file:
        data = json.load(file)

    index_entries = []
    for entry in data:
        page_number = int(entry["image"].split("_")[1].split(".")[0]) + 1
        for detection in entry["detections"]:
            if detection["text"]:
                detection["text"] = remove_special_characters(detection["text"])

            if detection["label"] == "Section-header" and detection["text"]:
                index_entries.append((page_number, detection['text']))

    index_entries.sort()

    seen = set()
    unique_index = []
    for page, text in index_entries:
        name = text.strip()

        if name not in seen:
            unique_index.append((page, text))
            seen.add(name)

    with open(output_index, 'w') as file:
        for page, text in unique_index:
            file.write(f"Page {page}: {text}\n")

def main():
    """Main function to execute the process."""
    paths = load_paths()
    model = YOLO(paths['model_path'])

    # Extract class names and colors from JSON
    class_names = paths['class_names']
    class_colors = paths['class_colors']

    # Convert PDF to images
    pdf_to_images(paths['test_file_path'], paths['converted_images_folder'])

    # Process the images and extract text
    process_images(paths['converted_images_folder'], paths['processed_images_folder'], paths['output_json_path'], model, class_names, class_colors)

    # Convert images back to PDF
    convert_images_to_pdf(paths['processed_images_folder'], paths['output_pdf_path'])

    # Generate the index file
    generate_index(paths['output_json_path'], paths['output_index_path'])

    # Cleanup
    shutil.rmtree(paths['converted_images_folder'])
    shutil.rmtree(paths['processed_images_folder'])

    print(f"Index saved to {paths['output_index_path']}")

if __name__ == '__main__':
    main()